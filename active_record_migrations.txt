Active Record Migrations

- migrations are a feature of Active Record (AR) that allows you to evolve your db schema over time
- rather than write schema modifications in pure SQL, migrations allow you to use an easy Ruby DSL to describe changes to your tables

1 Migration Overview
  - each migration is like a new 'version' of the db
  - a schema starts off with nothing in it, and each migration modifies it to add or remove tables, columns, or entries
  - AR knows how to update your schema along this timeline, bringing it from whatever point it is in the history to the latest version
  - AR will also update your db/schema.rb file to match the current structure of your database
  - the timestamps macro adds two columns, created_at and updated_at. the special columns are automatically managed by AR if they exist
  - on databases that support transactions with statements that change the schema, migrations are wrapped in a transaction. if the database does not support this, when a migration fails the parts of it that succeeded will not be rolled back. you will have to rollback the changes that were made by hand.
  - if you want a migration to do something that AR doesn't know how to reverse, you can implement your own reversable method or use up and down instead of change


2 Creating a Migration

2.1 Creating a Standalone Migration
  - migrations are stored as files in the db/migrate directory. one for each migration class
  - the name of the file is of the form YYYYMMDDHHMMSS_create_products.rb, a UTC timestamp identifying the migration followed by an udnerscore followed by the name of the migration
  - the name of the migration class (in its CamelCase version) should match the latter part of the file name
  - rails uses this timestamp to determine which migration should be run and in what order
  - AR provides a gernerator to handle making the migration file and naming it properly:
    rails generate migration AddPartNumbertToProducts
  - if the migration name is of the form "AddxxxToyyyy" or "RemovexxxFromyyy" and is followed by a list of column names and types then a migration containing the appropriate add_column and remove_column statements will be created
  - if the migration name is of the form "Createxxx" and is followed by a list of column names and types then a migration creating the table xxx with the columns listed will be generated
  - the generated files will be added to db/migrate/
  - migrations can be edited directly before they are run
  - there is a generator which will produce join tables if JoinTable is part of the name

2.2 Model Generators
  - the model and scaffold generators will create migrations appropriate for adding a new model
  - these migrations will already contain instructions for creating the relevant table
  - if you tll rails what columns you want, then statements adding these columns will also be created
  - you can append as many column name/type pairs as you want

2.3 Supported Type Modifiers
  - you can also specify some options just after the field type between curly braces
  - you can use the following modifiers:
    - limit sets the maximum size of the string/text/binary/integer fields
    - precision defines the precision for decimal fields
    - scale defines the scale for the decimal fields
    - polymorphic adds a type column for belongs_to associations


3 Writing a Migration

3.1 Creating a Table
  - the create_table method is fundamental, but will usually be generated for you if you use a model of scaffold generator ex:
    create_table :products do |t|
      t.string :name
    end
  - by default, create_table will creat a primary key called id
  - you can change the name of the primary key with the :primary_key option. if you do this, you will also need to update the corresponding model
  - if you need to pass db specific options you can place an SQL fragment in the :options option

3.2 Creating a Join Table
  - create_join_table creates a HABTM join table ex:
    creaet_join_table :products, :categories
  - this will create a categories_products table with two columns called category_id and product_id
  - HABTM means has and belongs to many
  - you can pass the :table_name option to the create_join_table method for control over the name of your join table
  - create_join_table also accepts a blcok, which you can use to add indices (which are not created by default) or additional columns

3.3 Changing Tables
  - a close cousin of create_table is change_table, used for changing existing tables
  - change_table has additional methods like remove and rename in addition to the methods available to create_table

3.4 When Helpers aren't Enough
  - if the helpers provided by AR aren't enough  you can use the execute method to execute arbitrary SQL:
    Products.connection.execute('UPDATE 'products' SET 'price' = 'free' WHERE 1')

3.5 Using the change Method
  - the change method is the primary way of writing migrations. it works in the majority of cases and AR usually knows how to reverse the migration automatically
  - the change method supports the following migration defintions:
    - add_column
    - add_index
    - add_reference
    - add_timestamps
    - create_table
    - create_join_table
    - drop_table (must supply a block)
    - drop_join_table (must supply a block)
    - remove_timestamps
    - rename_column
    - rename_index
    - remove_reference
    - rename_table
  - change_table is reversible as long as teh block does not call change, change_default, or remove
  - if you need to use any other methods, you should use reversible or write the up and down methods instead of using the change method

3.6 Using reversible
  - complex migrations may require processing that AR doesn't know how to reverse. you can use reversible to specify what to do when running a migration and what else to do when reverting it
  - using reversible will ensure that the instructions are executed in the right order
  - sometimes your migration will do something which is just plain irreversible, for example, it might destroy some data
  - in these cases you can raise ActiveREcord::IrreversibleMigration in your down block. 
  - if someone tries to rever your migration, an error message will be displayed saying that it can't be done

3.7 Using the up/down Methods
  - you can also use the old style of migration using up and down methods instead of the change method
  - the up method should describe the transformation you'd like to make to your schema, and the down method of your migration should rever teh transformations done by the up method
  - if your migration is irreversible, you should raise ActiveRecord::IrreversibleMigration from your down method

3.8 Reverting Previous Migrations
  - you can use AR's ability to rollback migrations using the revert method
  - the revert method also accepts a block of instructions to reverse. this could be useful to revert selected parts of previous migrations


4 Running Migrations
  - rails provides a set of Rake tasks to run certain sets of migrations
  - the rake db:migrate command runs teh change or up method for all the migrations that have not yet been run
  - if there are no such migrations, it exits
  - it will run these migrations in order based on the date of the migration
  - note: running db:migrate also invokes the db:schema:dump task, which will update your db/schema.rb to match the structure of your db
  - if you specify a target version, AR will run the required migrations (change, up, down) until it has reached the specified version ex:
    rake db:migrate VERSION=20080906120000

4.1 Rolling Back
  - a common task is to rollback the last migration: rake db:rollback
  - if you need to undo several migrations you can provide the STEP parameter:
    rake db:rollback STEP=3 will revert the last three migrations
  - db:migrate:redo is a shortcut for doing a rollback and then migrating back up again

4.2 Resetting the Database
  - rake db:reset will drop the database, recerate it and load the current schema into it

4.3 Running Specific Migrations
  - if you need to run a specific migration up or down, the db:migrate:up and db:migrate:down tasks will do that: 
    rake db:migrate:up Version=20080906120000

4.4 Running Migrations in Different Environments
  - by default rake db:migrate will run in the development environment
  - to run migrations against another environment you can specify it use the RAILS_ENV environment variable while running the commain:
    rake db:migrate RAILS_ENV=test

4.5 Changing teh Output of Running Migrations
  - by defualt migrations tell you exactly what they're doing and how long it took
  - several methods are provided in migrations that allow you to control this:
    - suppress_messages: takes a block as an argument and suprresses any output generated by the block
    - say: takes a message argument and outputs it as is. a second boolean argument can be passed to specify whether to indent or not
    - say_with_time: outputs text along with how long it took to run its block
  - rake db:migrate VERBOSE=false will suppress all output


5 Changing Existing Migrations
  - to change a migration that has already been run, you must rollback the migration (rake db:rollback), edit your migration and then run rake db:migrate to run the corrected version 
  - in general, editing existing migrations is not a good idea
  - instead, write a new migration that performs the changes you require
  - editing a freshly generated migration that has not yet been committed to source control is relatively harmless
  - the revert method can be helpful when writing a new migration to undo previous migrations in whole or in part


6 Using Models in Your Migrations
  - when creating or updating data in a migration, it is often tempting to use onr of your models. this can be done but some cation should be observed
  - problems occur when themodel uses database columns which are 1) not currently in the database and 2) will be created by this or a subsequent migration
  - a fix for this is to create a local model within the migration. this keeps rails from running the validations, so that the migrations run to completion
  - when using a local model, it's a good idea to call Product.reset_column_information to refresh the AR cache for the Product model prior to updating data in the database


7 Schema Dumping and You

7.1 What are Schema Files for?
  - migrations are not the authoritative source for your db schema
  - that role falls to either db/schema.rb or an SQL file which AR generates by examining the database
  - the schema files are not designed to be edited directly, they just represent the current state of the db
  - do not deploy a new instance of an app by replaying the entire migration history. it is much simpler and faster to just load into the database a description of the current schema
  - schema files are also useful if you want a quick look at the attributes of an AR object
  - the annotate_models gem automatically adds and updates comments at the top of each model summarizing the shema if you desire that functionality

7.2 Types of Schema Dumps
  - there are two ways to dump the schema. this is set in config/application.rb by the config.active_record.schema_format setting, which may be either :sql or :ruby
  - if :ruby is selected then the schema is stored in db/schema.rb. this file looks like a very big migration
  - db/schema.rb cannot express db specific items such as foreign key constraints, triggers, or stored procedures. if you are using features like this, then you should set the shema format to :sql
  - if :sql is selected then the db's structure will be dumped using a tool specific to the db (via the db:structure:dump rake task) into db/structure.sql
  - using the :sql schema format will prevent loading the schema into a RDBMS other than the one used to create it 

7.3 Schema Dumps and Source Control
  - because schema dumps are the authoritative source for your database schema, it is strongly recommended that you check them into source control


8 Active Recrod and Referential Integrity
  - the active record pattern (ARP) stipulates that intelligence belongs in your models, not in the db. because of this, features such as triggers or foreign key constraints, which shift some of that intelligence back into the db are not heavily used
  - validations such as validates: foeign_key, uniqueness: true are one way in which models can enforce data integrity
  - the :dependent option on associations allows models to automatically destroy child objects when the parents is destroyed
  - like anything which operates at the application level, these cannot guarantee referential integrity and so some people augment them with foreign key constraints in the db
  - although AR does not provide any tools fo rworking directly with such features, the execute method can be used to execute aribtary SQL
  - you could also use a gem like foreigner which adds foegin key support to AR


9 Migrations and Seed Data
  - some people use migrations to add data to the db. however, rails has a 'seeds' feature tha should be used for seeding a db with initial data
  - write the seeding code within db/seeds.rb then run rake db:seed
  